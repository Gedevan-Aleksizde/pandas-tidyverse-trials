{
    "sorting": "e = d >> arrange(*[X[c] for c in d.columns])",
    "filtering": "e = d >> filter_by(X.d < .5, (X.e > .5) | (X.f > .5))",
    "mutation": "e = d >> mutate(**{c: func(c) for c, func in zip(d.columns, [lambda c: X[c].round()] * d.shape[1])})",
    "grouping": "e = d >> group_by(*[X[c] for c in d.columns][:3])",
    "summarizing": "e = d >> summarize(**{c: func(X[c]) for c, func in zip(d.columns, [np.mean] * d.shape[1])})",
    "group-summarizing": "e = d >> group_by(*[X[c] for c in d.columns][:3]) >> summarize(**{c: func(X[c]) for c, func in zip(d.columns[3:], [np.mean] * (d.shape[1] - 3))})",
    "group-mutation": "e = d >> group_by(*[X[c] for c in d.columns][:3]) >> mutate(**{c: func(X[c]) for c, func in zip(d.columns[3:], [lambda x: x - np.mean(x)] * (d.shape[1] - 3))})",
    "wide-to-long": "e = d.melt(var_name='name')",
    "long-to-wide": "e = d_long.pivot(index='idx', columns='name').reset_index()"
}